=============
8051 CPU core
=============

There appears to be an 8051 CPU core which acts as an interface controller.
In this case, it implements a USB Mass Storage device.

The 8051 firmware is only 8 kB, and it appears to be a single generic firmware
image that's shared by the bootloader and all versions of application firmware
observed. All application firmwares have an identical image that's signed at
the end with "~I_blieve:)Faith". The bootloader contains an image that is
signed with random-looking hex bytes but which is otherwise identical.

Both the 8051 and ARM implement "main loops" which seem to consist entirely of
processing messages received over inter-processor communication pipes. So, it
would not appear on first inspection that either processor is really in the
driver's seat, but ultimately any code or data which differentiates the
functionality of the bootloader versus the normal firmware must live on the
ARM side of the channel. So this tells us that the tiny 8051 firmware image is
probably intended to be very generic. From the perspective of a firmware
engineer on the optical drive, this is probably a "black box" binary blob that
makes the USB controller work.

It seems like we can use this processor for whatever we like; the firmware
doesn't seem to be stored in flash, it appears to be in a memory mapped region
initialized by the ARM.

Of all the weird modified 8051 cores people use, this one seems to be quite
tame. In fact, it seems to be fairly light on features. No additional SFRs
beyond the standard ones that I can see, only 128 bytes of internal RAM. All
the I/O occurs via XDATA, which doesn't seem to have any RAM attached to it.

The main I/O idiom is to use one XDATA address as a hardware FIFO to read or
write bytes. This is pretty fast, especially if the 8051 runs at a high clock
rate. (seems likely)


Memory Regions
--------------

- Program Memory
  8 kB region

  Serves as the "Internal ROM" in 8051 architecture
  Loaded/mapped by the ARM core.

  An example of this region (not necessarily execute-in-place) is at 0xE000 in
  the bootloader flash. These images are easily recognized by a signature at
  offset +0x60, "MoaiEasterIslandThomasYoyo(^o^)/". It's unknown whether this
  string is checked or if it's just a greeting.

- Internal RAM
  128 bytes, from 00 to 7F.

- XDATA
  Memory mapped IO regions at 4Bxx and 4Dxx


Inter-Processor Communication
-----------------------------

The 8051 and ARM processors communicate via a memory mapped FIFO and/or shared
memory regions.

 Firmware region 0010 - 009c
    This is copied to RAM (just above the stack, at 2000D80) early during boot
    Overlaps with the 8051 interrupt vector table.
    This seems to be related to the "Shared Block" described in bootloader.txt


Main Loop
---------

A typical main loop on this processor handles inter-processor calls coming in from the ARM.

One-time setup:
    [4B94] = 0
    [4D01] = 3
    [4D04] = 46 'F'
    [4B98] = 0
    [4d92] = FE
    [4b95] = 6
    [4b73] = 94
    [4d84] = 0

Each loop:
    Ready? [4d91] = 1
    Sync? Read FIFO [4d90], repeat until byte is nonzero
    Read opcode byte, opcode = [4d90]
    Opcode switch

Opcodes:

    02   Takes some parameters, some data block parsing?
    04   Send SCSI status, "USBS" packets   
    05   USB block copy, optional "USBS" response
    06     Variant of 08
    07     Variant of 08
    08   Copy USB header from IO memory to RAM ...
    09     Variant of 08
    0b     Variant of 0d
    0a     Variant of 0d
    0c     Variant of 0d
    0d   Implements an entire transfer of some sort, with setup, loop, and status
    0e   Read 8 byte struct from IO, simple parsing loop
    0f   Very simple, 8-byte tag/length update?
    16     Variant of 04
    17     Variant of 05
    18   Wrapper for other opcodes: 04 09 07 22 1e
    1e   Complicated; involves timer, 32-bit length comparisons, two looping transfers
    1f     Variant of 08
    20     Variant of 08
    21   SCSI completion: some small USB transfers, optionally fall through to 04
    22     Variant of 08
    23   SCSI completion: another small USB thing, falls through to 04
    24     Variant of 23
    25     Variant of 23
    27   USB things, may fall through to 0e
    28     Variant of 27 with different size calculation
    29     Variant of 0d
    3b   Store 2 bytes: Could be system mode or version info. Same address was cleared by a weird table-driven startup loop.
    3c   Hardware reset?  [4db2]=30 delay [4db2]=20 [4db2]=30 delay [4db2]=20
    3f   Low-level protocol thing, part of main loop. Sends IPC 83 'A' 'N' [4d91]. Get write/read count?

~MeS`14
