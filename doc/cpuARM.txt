============
ARM CPU Core
============

Not yet sure what variety of ARM this is. Supports both 32-bit and 16-bit
Thumb instructions. Seems to have some proprietary memory protection features,
and it relies heavily on inter-processor communication with the other cores.


Vector Table
------------

The area from 10000 - 102ff is set aside by the bootloader protocol for
interrupt vectors. It's likely the hardware IVT relocates to 10000 prior to
application entry.

10000: reset
10004: ARM undefined instruction
10008: ARM software interrupt (reflect to boot sector +3C)
1000c: ARM prefetch abort exception
10010: ARM data abort exception 
10014: hardware interrupt? (reflect to boot sector +158)
1001c: fiq fast hardware interrupt
10040: Very complex (IPC?) message handler?
10046: SCSI command handler?
10158: Crash handler?
1019c: Syscall handler? Takes action if R0=1. MMIO~ 4031000-4042000


Cryptography
------------

Annoyingly but not necessarily suprisingly, I'm hitting cryptography already
just in trying to understand the boot process. It's likely someone thought the
firmware should include a chain of trust for something related to video DRM or
possibly protecting intellectual property. It's annoying, and hopefully not
very thorough.

 - Uses 128-bit blocks. It's likely AES, but I don't really know yet

 - A block cipher core lives at [4063000]

 - There also appears to be transparent decryption for code memory. The
   bootloader includes one encrypted region at 000:fff, but the application
   firmware includes many more. Unused areas at the end of these blocks
   exhibit a characteristic repeating 16-byte pattern, which seems like the
   transparent cipher would be using ECB mode. Every individually encrypted
   code block seems to use a different key. The blocks in the main app are
   prefixed with a NOP sled and an MSR instruction which enables supervisor
   mode.

   This hardware probably has a poweron default to be active for memory
   at 000:fff, hence the encrypted IVT in the bootloader.


Memory Map
----------

00000000 - 001fffff      Flash (2MB)
00000000 - 0000ffff      Write-protected boot block (64kB)
00400000 - 00400fff      Writeable 4kB page
                            Set up via reg [4011f08]=00400000
                            Copy of application IVT (0x10000) written here
                            Mirror of SRAM?

1fff8000                 More SRAM
02000000                 Main SRAM
04000000                 Memory mapped I/O


DRAM
----

I'm not yet sure where DRAM is usually mapped in the ARM address space. It's
usually accessed indirectly, via ref[20]. I've been referring to this space a
lot as '8051' address space because I saw the ARM copy the 8051 firmware image
there, but now that I've figured out how to dump it using undocumented SCSI
command 3C02, the whole DRAM area can be examined.

When dumping from the bootloader after cold boot, the characteristic noisy
checkerboard patterns of DRAM's wiring show up in the uninitialized areas.

       0 -      fff     [BOOT] uninitialized
                        [TS01] Array with 8-byte records
    1000 -     2fff     8051 program memory
    3000 -   1f7fff     [BOOT] uninitialized

  1f8000 -   3fffff     gobs of loosely structured data!
                          It could be more code data here, but my hunch is
                          that this is a ring buffer of command data
                          structures. Many of the repeating blocks look like
                          they could be arguments, and I feel like a
                          sufficiently awesome tool could convert this into a
                          log of recent transfers.

All signs point to the DRAM region being 4MB in size. This is the size of the
"cache memory" advertised for the device, and it looks like at 400000 and
after, the same 2MB of memory mirrors over and over.

Most of this memory seems to be dynamically allocated, so it often has useful
tidbits in it but the overall structure varies wildly from run to run.

Memory Mapped I/O
-----------------

This processor has a substantial zoo of memory mapped peripherals.
Very rough notes, may be wildly wrong.

4000000     Low level system control, interrupt enables

            4000000   uint32      Flags
                                     10    Global interrupt enable?

4001000     Reset control
4002000     Timer
4002058     "App select", affects bootloader in many ways
4003000
4004000
4004800

4010000     8051 Co-processor
            
            4010000   uint8       Flags
                                      1    Poll for bit=0 after logging to zr[c]

4011000     Coprocessor and encryption memory mapping control
            Possibly inter-processor message notification

            4011000   uint32      Flags
                                     80    Set at the top of bootloader app_main

            4011008   uint32      Low 10 bits (count?) set to 1 in app_main

            401100c   uint32      Flags
                                      4    Set after polling [4011088]
                                      2    Set / op / clear in app_main

            4011010   uint8       Poll while (bit6==0), then while (bit7==1)

            4011040   uint32      Flags
                                      1    Set while booting app firmware, in bootloader

            4011050   uint32      Flags
                                      1    Cleared after polling [4011088]

            4011088   uint32      Flags
                                      1    Poll for bit=1 after setting [4011000] |= 80

            - Transparent 128-bit code decryption, possibly AES-ECB mode

            4011064   uint32      Flags
                                      4    Transparent encryption enabled
            4011068   uint32      First address of transparent encryption region
            401106c   uint32      Final address in transparent encryption region

            - Movable memory regions

            These normally live at 000:3ff and 400:fff (over the bootloader encrypted area)
            but during app boot they temporarily move above flash so we can copy the app
            IVT to them transparently.

            4011f04   uint32      Flags
                                    800    Set by boot0
                                    400    Enable flag
                                    200    Enable flag, set by boot0
                                    100    Enable flag, set by boot0
            4011f08   uint32      Base address 1
            4011f0c   uint32      Final address 1
            4011f10   uint32      Base address 2
            4011f14   uint32      Final address 2

4020000
4020f00     Related to RAM region 2000000, set up during boot0

            4020f04   uint32      Flags
                                    800    Set by boot0

4030000     RAM region setup / DMA engine

            40300e8   uint32      Mapped pointer for SCSI device-to-host transfer
                                  (DMA source address)

            40300f4   uint32      =   1_ffff  during boot0 (SRAM size?)
            4030f04   uint32      =        2  during boot0, then =8802 at end of boot0
            4030f20   uint32      = 1e0_0000  during boot0
            4030f24   uint32      = 1ff_ffff  during boot0
            4030f40   uint32      = 200_0000  during boot0
            4030f44   uint32      = 200_19ff  during boot0

4031000     - Vector 1019c

            4031000   uint32      =4000_0800  during boot0
            4031004   uint32      =        8  during boot0

4031140
4031180
4032040
4033000     - Vector 1019c
4033100
4033200
4033300

4040040     Related to commands (SCSI?) received via vector 10046
4041000
4042000     - SCSI response pipe

            40400a5   uint8       Bits 1F cleared prior to PIO transfer
            40400a8   uint32      Byte FIFO register for PIO (non-DMA)
                                  Used by cmd03 Request Sense and some others.
            40400d4   uint32      Byte in bits 15:8, set prior to transfer. PIO: 0x01__
            
            4042154   uint32      Pre-initiation write
                                     DMA: size, after pointer written to [40300e8]
                                     PIO: Before other MMIO writes, &= 1

                                   This one seems more protocol-related than to control
                                   the DMA/PIO hardware. It's a weird address (a header in
                                   a buffer somewhere) and the ordering is strange. In PIO,
                                   this is written prior to all error handling.

4050000

4062000
4063000     Crypto coprocessor. Seems to have a few different modes it can operate in.
            128-bit block size, probably AES. Used by bootloader and app firmware for
            hashing.

            4063000   uint32      Flags
                                      1   Set before op (after 4063090:1)
            4063004   uint8       Flags
                                      2   Operation complete
            4063008   uint32      Flags
                                      4   Cleared before op
                                      2   Cleared before op

            4063010   uint128     Zero'ed before a hashing operation
                                  Conditionally zeroed by boot2
            4063020   uint128     Key loaded from 10ff0 by boot2
                                  Blocks loaded from regions we're checking.
                                  Simpler checker algo in cmd3B uses a key from 1ff000.

            4063038   uint32      Result (boot2 expected a1b9d358)
            406303c   uint32      Result (boot2 expected 13201959)

            4063084   uint32      Flags
                                      4   Set during boot2
            4063088   uint32      boot2 init: reg = 50 + (reg & ~70)
            4063090   uint32      Flags
                                      1   Set before op, after op

4070200
4070300
4070400
4070500

4081e00
4081f00
4082d00

40b0040

40d0200

4100000
4100701

41f4b00
41f4d00
41f4f00
41f5c00
41f5f00

4200000
4201000
4204000
420c000

